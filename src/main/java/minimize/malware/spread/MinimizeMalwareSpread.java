package minimize.malware.spread;

import java.util.Arrays;

/**
 * @author hum
 */
public class MinimizeMalwareSpread {
    int[] p = new int[305];
    int[] size = new int[305];

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int len = graph.length;
        for (int i = 0; i < len; i++) {
            p[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len; j++) {
                if (graph[i][j] == 1) {
                    size[find(j)] += size[find(i)];
                    p[find(i)] = find(j);
                }
            }
        }
        int[] count = new int[305];
        for (int i : initial) {
            count[find(i)]++;
        }
        int result = -1;
        int max = -1;
        Arrays.sort(initial);
        for (int i : initial) {
            if (count[find(i)] == 1) {
                if (size[find(i)] > max) {
                    max = size[find(i)];
                    result = i;
                }
            }
        }
        return result == -1 ? initial[0] : result;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

}
