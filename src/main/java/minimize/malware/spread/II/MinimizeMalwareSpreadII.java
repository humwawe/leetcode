package minimize.malware.spread.II;

import java.util.*;

/**
 * @author hum
 */
public class MinimizeMalwareSpreadII {
    int[] p = new int[305];
    int[] size = new int[305];

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int len = graph.length;
        for (int i = 0; i < len; i++) {
            p[i] = i;
            size[i] = 1;
        }
        boolean[] malware = new boolean[305];
        for (int i : initial) {
            malware[i] = true;
        }
        for (int i = 0; i < len; i++) {
            if (!malware[i]) {
                for (int j = 0; j < len; j++) {
                    if (!malware[j]) {
                        if (graph[i][j] == 1) {
                            size[find(j)] += size[find(i)];
                            p[find(i)] = find(j);
                        }
                    }
                }
            }
        }
        int[] count = new int[305];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i : initial) {
            if (malware[i]) {
                Set<Integer> set = new HashSet<>();
                for (int j = 0; j < len; j++) {
                    if (!malware[j]) {
                        if (graph[i][j] == 1) {
                            set.add(find(j));
                            count[find(j)]++;
                        }
                    }
                }
                map.put(i, set);
            }
        }
        int result = -1;
        int max = -1;
        Arrays.sort(initial);
        for (int i : initial) {
            int res = 0;
            Set<Integer> set = map.get(i);
            for (Integer j : set) {
                if (count[j] == 1) {
                    res += size[j];
                }
            }
            if (res > max) {
                max = res;
                result = i;
            }
        }
        return result == -1 ? initial[0] : result;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }
}
